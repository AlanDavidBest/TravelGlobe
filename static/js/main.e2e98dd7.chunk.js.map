{"version":3,"sources":["components/nav/SideBar.js","components/plane/Plane.js","CesiumContext.js","components/globe/Globe.js","components/otbimage/OtbImage.js","App.js","reportWebVitals.js","index.js","../external \"Cesium\"","../node_modules/cesium/Source/Core sync"],"names":["SideBar","props","Nav","className","activeKey","onSelect","selectedKey","alert","Item","Form","inline","FormControl","type","placeholder","Button","variant","Plane","position","Cartesian3","fromDegrees","longitude","latitude","elevation","model","uri","maximumScale","minimumPixelSize","state","viewer","setInstance","ref","console","log","CesiumContext","React","createContext","pointGraphics","pixelSize","dummyCredit","document","createElement","Global","fromDegreesArray","createRef","this","current","cesiumElement","context","full","creditContainer","timeline","animation","fullscreenButton","sceneModePicker","baseLayerPicker","projectionPicker","navigationHelpButton","homeButton","geocoder","countries","features","filter","country","geometry","map","i","countryCoordinates","concat","apply","coordinates","name","id","description","properties","hierarchy","fill","material","Color","outline","outlineColor","RED","outlineWidth","polygon","j","polyCoords","point","Component","contextType","OtbImage","Image","src","App","Provider","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","module","exports","Cesium","webpackEmptyContext","req","e","Error","code","keys","resolve"],"mappings":"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","file":"static/js/main.e2e98dd7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Nav, Form, FormControl, Button } from \"react-bootstrap\";\r\nimport \"./SideBar.css\";\r\n\r\nfunction SideBar(props) {\r\n  return (\r\n      <Nav\r\n        className=\"col-md-12 d-none d-md-block bg-dark sidebar\"\r\n        activeKey=\"/home\"\r\n        onSelect={(selectedKey) => alert(`selected ${selectedKey}`)}\r\n      >\r\n        <div className=\"sidebar-sticky\"></div>\r\n        <Nav.Item>\r\n          <Form inline>\r\n            <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\r\n            <Button variant=\"outline-success\">Search</Button>\r\n          </Form>\r\n        </Nav.Item>\r\n      </Nav>\r\n  );\r\n}\r\n\r\nexport default SideBar;\r\n","import { Cartesian3 } from \"cesium\";\r\nimport { Entity } from \"resium\";\r\n\r\nfunction Plane(props) {\r\n  return (\r\n    <Entity\r\n      position={Cartesian3.fromDegrees(props.longitude, props.latitude, props.elevation)}\r\n      model={{\r\n        uri: \"models/Cesium_Air.glb\",\r\n        maximumScale: 30000,\r\n        minimumPixelSize: 512,\r\n      }}\r\n      // tracked\r\n    />\r\n  );\r\n}\r\n\r\nexport default Plane;\r\n","import React from \"react\";\r\nconst CesiumContext = React.createContext();\r\nexport const state = {\r\n  viewer: \"\",\r\n  setInstance: (ref) => {\r\n    console.log(ref);\r\n    state.viewer = ref;\r\n  }\r\n};\r\nexport default CesiumContext;\r\n","import React, { useState, createRef } from \"react\";\r\nimport { Cartesian3, Color } from \"cesium\";\r\nimport { Viewer, Entity, PolygonGraphics } from \"resium\";\r\nimport Plane from \"../plane/Plane\";\r\nimport CesiumContext from \"../../CesiumContext\";\r\nimport countries from \"../../data/countries.geo.json\";\r\nimport EntityCollection from \"cesium/Source/DataSources/EntityCollection\";\r\n\r\nconst position = Cartesian3.fromDegrees(-74.0707383, 40.7117244, 100);\r\nconst pointGraphics = { pixelSize: 10 };\r\nconst dummyCredit = document.createElement(\"div\");\r\n\r\n\r\n//Cartesian3.fromDegreesArray(countries.features[0].geometry.coordinates)))\r\n\r\n\r\nconst positions = Cartesian3.fromDegreesArray([\r\n  -5.661949, 54.554603, -6.197885, 53.867565, -6.95373, 54.073702, -7.572168,\r\n  54.059956, -7.366031, 54.595841, -7.572168, 55.131622, -6.733847, 55.17286,\r\n  -5.661949, 54.554603, -3.005005, 58.635, -4.073828, 57.553025, -3.055002,\r\n  57.690019, -1.959281, 57.6848, -2.219988, 56.870017, -3.119003, 55.973793,\r\n  -2.085009, 55.909998, -2.005676, 55.804903, -1.114991, 54.624986, -0.430485,\r\n  54.464376, 0.184981, 53.325014, 0.469977, 52.929999, 1.681531, 52.73952,\r\n  1.559988, 52.099998, 1.050562, 51.806761, 1.449865, 51.289428, 0.550334,\r\n  50.765739, -0.787517, 50.774989, -2.489998, 50.500019, -2.956274, 50.69688,\r\n  -3.617448, 50.228356, -4.542508, 50.341837, -5.245023, 49.96, -5.776567,\r\n  50.159678, -4.30999, 51.210001, -3.414851, 51.426009, -3.422719, 51.426848,\r\n  -4.984367, 51.593466, -5.267296, 51.9914, -4.222347, 52.301356, -4.770013,\r\n  52.840005, -4.579999, 53.495004, -3.093831, 53.404547, -3.09208, 53.404441,\r\n  -2.945009, 53.985, -3.614701, 54.600937, -3.630005, 54.615013, -4.844169,\r\n  54.790971, -5.082527, 55.061601, -4.719112, 55.508473, -5.047981, 55.783986,\r\n  -5.586398, 55.311146, -5.644999, 56.275015, -6.149981, 56.78501, -5.786825,\r\n  57.818848, -5.009999, 58.630013, -4.211495, 58.550845, -3.005005, 58.635,\r\n]);\r\n\r\nexport default class Global extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.ref = createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.ref.current && this.ref.current.cesiumElement) {\r\n      this.context.setInstance(this.ref.current.cesiumElement);\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <Viewer\r\n        ref={this.ref}\r\n        full\r\n        creditContainer={dummyCredit}\r\n        timeline={false}\r\n        animation={false}\r\n        fullscreenButton={false}\r\n        sceneModePicker={false}\r\n        baseLayerPicker={true}\r\n        projectionPicker={false}\r\n        navigationHelpButton={false}\r\n        homeButton={false}\r\n        geocoder={false}\r\n      >\r\n        \r\n            <Entity> {\r\n                countries.features.filter(country => country.geometry.type === 'Polygon').map((country, i) => {\r\n                    var countryCoordinates = [].concat.apply([], country.geometry.coordinates[0]);\r\n                    return (\r\n                        <Entity name={country.id} description={country.properties.name}>\r\n                            <PolygonGraphics hierarchy={Cartesian3.fromDegreesArray(countryCoordinates)} fill={true} material={new Color(1.0, 1.0, 1.0, 0)} outline={true} outlineColor={Color.RED} outlineWidth={10} />;\r\n                        </Entity>\r\n                    )\r\n                })\r\n            }\r\n            </Entity>\r\n            <Entity> {\r\n                countries.features.filter(country => country.geometry.type === 'MultiPolygon').map((country, i) => {\r\n                    return (\r\n                            country.geometry.coordinates.map((polygon, j) => {\r\n                                var  polyCoords = [].concat.apply([], polygon[0])\r\n                                return (\r\n                                    <Entity name={country.id} description={country.properties.name}>\r\n                                        <PolygonGraphics hierarchy={Cartesian3.fromDegreesArray(polyCoords)} fill={true} material={new Color(1.0, 1.0, 1.0, 0)} outline={true} outlineColor={Color.RED} outlineWidth={10}/>;\r\n                                    </Entity>\r\n                                )\r\n                            }\r\n                            )\r\n                    )\r\n                        }\r\n                )\r\n            }\r\n            </Entity>\r\n       \r\n        {/* <Entity name=\"United Kingdom\" description=\"United Kingdom Polygon\">\r\n          <PolygonGraphics hierarchy={positions} material={Color.GREEN} />\r\n        </Entity> */}\r\n\r\n        <Entity position={position} point={pointGraphics} />\r\n\r\n        <Plane longitude={-0.124625} latitude={51.510357} elevation={100000} />\r\n      </Viewer>\r\n    );\r\n  }\r\n}\r\nGlobal.contextType = CesiumContext;\r\n","import React from \"react\";\r\nimport { Image } from \"react-bootstrap\";\r\nimport \"./OtbImage.css\";\r\n\r\nfunction OtbImage(props) {\r\n  return (\r\n      <Image \r\n        src=\"otb.png\"\r\n        id=\"otbImage\"\r\n      />\r\n  );\r\n}\r\n\r\nexport default OtbImage;\r\n","import \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport SideBar from \"./components/nav/SideBar.js\";\r\nimport Globe from \"./components/globe/Globe.js\";\r\nimport \"./components/nav/SideBar.css\";\r\nimport OtbImage from \"./components/otbimage/OtbImage\";\r\nimport CesiumContext, { state }  from \"./CesiumContext\"\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <CesiumContext.Provider value={state}>\r\n        <SideBar />\r\n        <Globe />\r\n        <OtbImage />\r\n      </CesiumContext.Provider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","module.exports = Cesium;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 64;"],"sourceRoot":""}